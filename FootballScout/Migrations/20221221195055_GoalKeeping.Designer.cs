// <auto-generated />
using System;
using FootballScout.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballScout.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221221195055_GoalKeeping")]
    partial class GoalKeeping
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FootballScout.Data.Entities.Goalkeeping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AerialReach")
                        .HasColumnType("int");

                    b.Property<int>("CommandOfArea")
                        .HasColumnType("int");

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("Eccentricity")
                        .HasColumnType("int");

                    b.Property<int>("FirstTouch")
                        .HasColumnType("int");

                    b.Property<int>("Handling")
                        .HasColumnType("int");

                    b.Property<int>("Kicking")
                        .HasColumnType("int");

                    b.Property<int>("OneOnOnes")
                        .HasColumnType("int");

                    b.Property<int>("Passing")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Punching")
                        .HasColumnType("int");

                    b.Property<int>("Reflexes")
                        .HasColumnType("int");

                    b.Property<int>("RushingOut")
                        .HasColumnType("int");

                    b.Property<int>("Throwing")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Goalkeeping");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Mental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aggression")
                        .HasColumnType("int");

                    b.Property<int>("Anticipation")
                        .HasColumnType("int");

                    b.Property<int>("Bravery")
                        .HasColumnType("int");

                    b.Property<int>("Composure")
                        .HasColumnType("int");

                    b.Property<int>("Concentration")
                        .HasColumnType("int");

                    b.Property<int>("Decisions")
                        .HasColumnType("int");

                    b.Property<int>("Determination")
                        .HasColumnType("int");

                    b.Property<int>("Flair")
                        .HasColumnType("int");

                    b.Property<int>("Leadership")
                        .HasColumnType("int");

                    b.Property<int>("OffTheBall")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Positioning")
                        .HasColumnType("int");

                    b.Property<int>("Teamwork")
                        .HasColumnType("int");

                    b.Property<int>("Vision")
                        .HasColumnType("int");

                    b.Property<int>("WorkRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Mental");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Physical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Acceleration")
                        .HasColumnType("int");

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("JumpingReach")
                        .HasColumnType("int");

                    b.Property<int>("NaturalFitness")
                        .HasColumnType("int");

                    b.Property<int>("Pace")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Physical");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Contract")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentAbility")
                        .HasColumnType("int");

                    b.Property<bool>("IsEuCitizen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoalKeeper")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Personality")
                        .HasColumnType("int");

                    b.Property<int>("PotentialAbility")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Training_Facilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youth_Facilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Technical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Corners")
                        .HasColumnType("int");

                    b.Property<int>("Crossing")
                        .HasColumnType("int");

                    b.Property<int>("Dribbling")
                        .HasColumnType("int");

                    b.Property<int>("Finishing")
                        .HasColumnType("int");

                    b.Property<int>("FirstTouch")
                        .HasColumnType("int");

                    b.Property<int>("FreeKickTaking")
                        .HasColumnType("int");

                    b.Property<int>("Heading")
                        .HasColumnType("int");

                    b.Property<int>("LongShots")
                        .HasColumnType("int");

                    b.Property<int>("LongThrows")
                        .HasColumnType("int");

                    b.Property<int>("Marking")
                        .HasColumnType("int");

                    b.Property<int>("Passing")
                        .HasColumnType("int");

                    b.Property<int>("PenaltyTaking")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Tackling")
                        .HasColumnType("int");

                    b.Property<int>("Technique")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Technical");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Goalkeeping", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Goalkeeping")
                        .HasForeignKey("FootballScout.Data.Entities.Goalkeeping", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Mental", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Mental")
                        .HasForeignKey("FootballScout.Data.Entities.Mental", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Physical", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Physical")
                        .HasForeignKey("FootballScout.Data.Entities.Physical", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Player", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Team", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Technical", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Technical")
                        .HasForeignKey("FootballScout.Data.Entities.Technical", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Player", b =>
                {
                    b.Navigation("Goalkeeping")
                        .IsRequired();

                    b.Navigation("Mental")
                        .IsRequired();

                    b.Navigation("Physical")
                        .IsRequired();

                    b.Navigation("Technical")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
