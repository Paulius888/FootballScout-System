// <auto-generated />
using System;
using FootballScout.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FootballScout.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230413084619_Listed_no_copy")]
    partial class Listednocopy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("FootballScout.Data.Dtos.Auth.RestUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FootballScout.Data.Entities.FieldStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Aerial")
                        .HasColumnType("integer");

                    b.Property<int>("Attacking")
                        .HasColumnType("integer");

                    b.Property<int>("Defending")
                        .HasColumnType("integer");

                    b.Property<int>("MentalId")
                        .HasColumnType("integer");

                    b.Property<int>("Mentals")
                        .HasColumnType("integer");

                    b.Property<int>("Overall")
                        .HasColumnType("integer");

                    b.Property<int>("PhysicalId")
                        .HasColumnType("integer");

                    b.Property<int>("Physicals")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalId")
                        .HasColumnType("integer");

                    b.Property<int>("Technicals")
                        .HasColumnType("integer");

                    b.Property<int>("Vision")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MentalId")
                        .IsUnique();

                    b.HasIndex("PhysicalId")
                        .IsUnique();

                    b.HasIndex("TechnicalId")
                        .IsUnique();

                    b.ToTable("FieldStats");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.GoalStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Aerial")
                        .HasColumnType("integer");

                    b.Property<int>("Communication")
                        .HasColumnType("integer");

                    b.Property<int>("Distribution")
                        .HasColumnType("integer");

                    b.Property<int>("Eccentricity")
                        .HasColumnType("integer");

                    b.Property<int>("GoalkeepingId")
                        .HasColumnType("integer");

                    b.Property<int>("MentalId")
                        .HasColumnType("integer");

                    b.Property<int>("Mentals")
                        .HasColumnType("integer");

                    b.Property<int>("Overall")
                        .HasColumnType("integer");

                    b.Property<int>("PhysicalId")
                        .HasColumnType("integer");

                    b.Property<int>("Physicals")
                        .HasColumnType("integer");

                    b.Property<int>("ShotStoping")
                        .HasColumnType("integer");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GoalkeepingId")
                        .IsUnique();

                    b.HasIndex("MentalId")
                        .IsUnique();

                    b.HasIndex("PhysicalId")
                        .IsUnique();

                    b.ToTable("GoalStats");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Goalkeeping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("AerialReach")
                        .HasColumnType("integer");

                    b.Property<int>("CommandOfArea")
                        .HasColumnType("integer");

                    b.Property<int>("Communication")
                        .HasColumnType("integer");

                    b.Property<int>("Eccentricity")
                        .HasColumnType("integer");

                    b.Property<int>("FirstTouch")
                        .HasColumnType("integer");

                    b.Property<int>("Handling")
                        .HasColumnType("integer");

                    b.Property<int>("Kicking")
                        .HasColumnType("integer");

                    b.Property<int>("OneOnOnes")
                        .HasColumnType("integer");

                    b.Property<int>("Passing")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Punching")
                        .HasColumnType("integer");

                    b.Property<int>("Reflexes")
                        .HasColumnType("integer");

                    b.Property<int>("RushingOut")
                        .HasColumnType("integer");

                    b.Property<int>("Throwing")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Goalkeeping");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("League");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.ListedPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("ShortListId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ShortListId");

                    b.ToTable("ListedPlayer");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Mental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Aggression")
                        .HasColumnType("integer");

                    b.Property<int>("Anticipation")
                        .HasColumnType("integer");

                    b.Property<int>("Bravery")
                        .HasColumnType("integer");

                    b.Property<int>("Composure")
                        .HasColumnType("integer");

                    b.Property<int>("Concentration")
                        .HasColumnType("integer");

                    b.Property<int>("Decisions")
                        .HasColumnType("integer");

                    b.Property<int>("Determination")
                        .HasColumnType("integer");

                    b.Property<int>("Flair")
                        .HasColumnType("integer");

                    b.Property<int>("Leadership")
                        .HasColumnType("integer");

                    b.Property<int>("OffTheBall")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Positioning")
                        .HasColumnType("integer");

                    b.Property<int>("Teamwork")
                        .HasColumnType("integer");

                    b.Property<int>("Vision")
                        .HasColumnType("integer");

                    b.Property<int>("WorkRate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Mental");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Physical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Acceleration")
                        .HasColumnType("integer");

                    b.Property<int>("Agility")
                        .HasColumnType("integer");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("JumpingReach")
                        .HasColumnType("integer");

                    b.Property<int>("NaturalFitness")
                        .HasColumnType("integer");

                    b.Property<int>("Pace")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Stamina")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Physical");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Contract")
                        .HasColumnType("date");

                    b.Property<int>("CurrentAbility")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEuCitizen")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGoalKeeper")
                        .HasColumnType("boolean");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("League_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Personality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PotentialAbility")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string[]>("Role")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Team_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Wage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.ShortList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShortList");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("League_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Training_Facilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Youth_Facilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Technical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("Corners")
                        .HasColumnType("integer");

                    b.Property<int>("Crossing")
                        .HasColumnType("integer");

                    b.Property<int>("Dribbling")
                        .HasColumnType("integer");

                    b.Property<int>("Finishing")
                        .HasColumnType("integer");

                    b.Property<int>("FirstTouch")
                        .HasColumnType("integer");

                    b.Property<int>("FreeKickTaking")
                        .HasColumnType("integer");

                    b.Property<int>("Heading")
                        .HasColumnType("integer");

                    b.Property<int>("LongShots")
                        .HasColumnType("integer");

                    b.Property<int>("LongThrows")
                        .HasColumnType("integer");

                    b.Property<int>("Marking")
                        .HasColumnType("integer");

                    b.Property<int>("Passing")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltyTaking")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Tackling")
                        .HasColumnType("integer");

                    b.Property<int>("Technique")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Technical");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FootballScout.Data.Entities.FieldStats", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Mental", "Mental")
                        .WithOne("FieldStats")
                        .HasForeignKey("FootballScout.Data.Entities.FieldStats", "MentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballScout.Data.Entities.Physical", "Physical")
                        .WithOne("FieldStats")
                        .HasForeignKey("FootballScout.Data.Entities.FieldStats", "PhysicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballScout.Data.Entities.Technical", "Technical")
                        .WithOne("FieldStats")
                        .HasForeignKey("FootballScout.Data.Entities.FieldStats", "TechnicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mental");

                    b.Navigation("Physical");

                    b.Navigation("Technical");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.GoalStats", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Goalkeeping", "Goalkeeping")
                        .WithOne("GoalStats")
                        .HasForeignKey("FootballScout.Data.Entities.GoalStats", "GoalkeepingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballScout.Data.Entities.Mental", "Mental")
                        .WithOne("GoalStats")
                        .HasForeignKey("FootballScout.Data.Entities.GoalStats", "MentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballScout.Data.Entities.Physical", "Physical")
                        .WithOne("GoalStats")
                        .HasForeignKey("FootballScout.Data.Entities.GoalStats", "PhysicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goalkeeping");

                    b.Navigation("Mental");

                    b.Navigation("Physical");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Goalkeeping", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Goalkeeping")
                        .HasForeignKey("FootballScout.Data.Entities.Goalkeeping", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.ListedPlayer", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballScout.Data.Entities.ShortList", "ShortList")
                        .WithMany()
                        .HasForeignKey("ShortListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("ShortList");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Mental", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Mental")
                        .HasForeignKey("FootballScout.Data.Entities.Mental", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Physical", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Physical")
                        .HasForeignKey("FootballScout.Data.Entities.Physical", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Player", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.ShortList", b =>
                {
                    b.HasOne("FootballScout.Data.Dtos.Auth.RestUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Team", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Technical", b =>
                {
                    b.HasOne("FootballScout.Data.Entities.Player", "Player")
                        .WithOne("Technical")
                        .HasForeignKey("FootballScout.Data.Entities.Technical", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FootballScout.Data.Dtos.Auth.RestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FootballScout.Data.Dtos.Auth.RestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballScout.Data.Dtos.Auth.RestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FootballScout.Data.Dtos.Auth.RestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Goalkeeping", b =>
                {
                    b.Navigation("GoalStats")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Mental", b =>
                {
                    b.Navigation("FieldStats")
                        .IsRequired();

                    b.Navigation("GoalStats")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Physical", b =>
                {
                    b.Navigation("FieldStats")
                        .IsRequired();

                    b.Navigation("GoalStats")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Player", b =>
                {
                    b.Navigation("Goalkeeping")
                        .IsRequired();

                    b.Navigation("Mental")
                        .IsRequired();

                    b.Navigation("Physical")
                        .IsRequired();

                    b.Navigation("Technical")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballScout.Data.Entities.Technical", b =>
                {
                    b.Navigation("FieldStats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
